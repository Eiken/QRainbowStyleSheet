name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build - Python ${{ matrix.python-version }} - ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      max-parallel: 2
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions
    - name: Build with tox
      run: tox
      env:
        PLATFORM: ${{ matrix.platform }}
        TASK: build
  test:
    needs: [build]
    name: Test - ${{ matrix.tasks }}
    runs-on: ${{ matrix.platform }}
    strategy:
      max-parallel: 2
      matrix:
        platform: [ubuntu-latest]
        python-version: [3.9]
        tasks: [lint, safety, metric, develop, doc, release]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions
    - name: Testing ${{ matrix.tasks }}
      run: tox
      env:
        PLATFORM: ${{ matrix.platform }}
        TASK: ${{ matrix.tasks }}

  release:
    runs-on: ubuntu-latest
#     needs: [build, test]
    name: Publish release

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r req-doc.txt
        python -m pip install .

    - name: Get package version
      run: |
        python qrainbowstyle --version > version.txt
        echo "VERSION = $(cat version.txt)" >> $GITHUB_ENV

    - name: Get latest version
#       latest_tag=$(git describe --abbrev=0 --tags)
      run: |
        git fetch --tags
        git fetch --prune --unshallow || true
        echo "RELEASE_VERSION=$(git describe --abbrev=0 --tags)" >> $GITHUB_ENV

    - name: Create a release
      if: ${{ env.RELEASE_VERSION }} != ${{ env.VERSION }}
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        
